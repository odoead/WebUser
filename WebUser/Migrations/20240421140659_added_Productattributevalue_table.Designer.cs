// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using WebUser.Data;
#nullable disable
namespace WebUser.Migrations
{
    [DbContext(typeof(DB_Context))]
    [Migration("20240421140659_added_Productattributevalue_table")]
    partial class added_Productattributevalue_table
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);
            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);
            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");
                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");
                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");
                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");
                    b.HasKey("Id");
                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");
                    b.ToTable("AspNetRoles", (string)null);
                });
            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");
                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);
                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");
                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");
                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");
                    b.HasKey("Id");
                    b.HasIndex("RoleId");
                    b.ToTable("AspNetRoleClaims", (string)null);
                });
            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");
                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);
                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");
                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");
                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");
                    b.HasKey("Id");
                    b.HasIndex("UserId");
                    b.ToTable("AspNetUserClaims", (string)null);
                });
            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");
                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");
                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");
                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");
                    b.HasKey("LoginProvider", "ProviderKey");
                    b.HasIndex("UserId");
                    b.ToTable("AspNetUserLogins", (string)null);
                });
            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");
                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");
                    b.HasKey("UserId", "RoleId");
                    b.HasIndex("RoleId");
                    b.ToTable("AspNetUserRoles", (string)null);
                });
            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");
                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");
                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");
                    b.HasKey("UserId", "LoginProvider", "Name");
                    b.ToTable("AspNetUserTokens", (string)null);
                });
            modelBuilder.Entity("WebUser.Domain.entities.AttributeName", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");
                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"), 1L, 1);
                    b.Property<int>("CategoryID")
                        .HasColumnType("int");
                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");
                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");
                    b.HasKey("ID");
                    b.HasIndex("CategoryID");
                    b.ToTable("AttributeNames");
                });
            modelBuilder.Entity("WebUser.Domain.entities.AttributeValue", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");
                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"), 1L, 1);
                    b.Property<int?>("AttributeNameID")
                        .HasColumnType("int");
                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");
                    b.HasKey("ID");
                    b.HasIndex("AttributeNameID");
                    b.ToTable("AttributeValues");
                });
            modelBuilder.Entity("WebUser.Domain.entities.Cart", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");
                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"), 1L, 1);
                    b.Property<string>("UserID")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");
                    b.HasKey("ID");
                    b.HasIndex("UserID");
                    b.ToTable("Carts");
                });
            modelBuilder.Entity("WebUser.Domain.entities.CartItem", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");
                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"), 1L, 1);
                    b.Property<int>("Amount")
                        .HasColumnType("int");
                    b.Property<int>("CartID")
                        .HasColumnType("int");
                    b.Property<int>("ProductID")
                        .HasColumnType("int");
                    b.HasKey("ID");
                    b.HasIndex("CartID");
                    b.HasIndex("ProductID");
                    b.ToTable("CartItems");
                });
            modelBuilder.Entity("WebUser.Domain.entities.Category", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");
                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"), 1L, 1);
                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");
                    b.Property<int?>("ParentCategoryID")
                        .HasColumnType("int");
                    b.HasKey("ID");
                    b.HasIndex("ParentCategoryID");
                    b.ToTable("Categories");
                });
            modelBuilder.Entity("WebUser.Domain.entities.Coupon", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");
                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"), 1L, 1);
                    b.Property<DateTime>("ActiveFrom")
                        .HasColumnType("datetime2");
                    b.Property<DateTime>("ActiveTo")
                        .HasColumnType("datetime2");
                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");
                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");
                    b.Property<int>("DiscountPercent")
                        .HasColumnType("int");
                    b.Property<double>("DiscountVal")
                        .HasColumnType("float");
                    b.Property<bool>("IsActivated")
                        .HasColumnType("bit");
                    b.Property<int?>("OrderID")
                        .HasColumnType("int");
                    b.Property<int?>("OrderProductID")
                        .HasColumnType("int");
                    b.Property<int>("ProductID")
                        .HasColumnType("int");
                    b.HasKey("ID");
                    b.HasIndex("OrderID");
                    b.HasIndex("OrderProductID");
                    b.HasIndex("ProductID");
                    b.ToTable("Coupons");
                });
            modelBuilder.Entity("WebUser.Domain.entities.Discount", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");
                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"), 1L, 1);
                    b.Property<DateTime>("ActiveFrom")
                        .HasColumnType("datetime2");
                    b.Property<DateTime>("ActiveTo")
                        .HasColumnType("datetime2");
                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");
                    b.Property<int>("DiscountPercent")
                        .HasColumnType("int");
                    b.Property<double>("DiscountVal")
                        .HasColumnType("float");
                    b.Property<int>("ProductID")
                        .HasColumnType("int");
                    b.HasKey("ID");
                    b.HasIndex("ProductID");
                    b.ToTable("Discounts");
                });
            modelBuilder.Entity("WebUser.Domain.entities.Image", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");
                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"), 1L, 1);
                    b.Property<byte[]>("ImageContent")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");
                    b.Property<int?>("ProductID")
                        .HasColumnType("int");
                    b.Property<string>("UserID")
                        .HasColumnType("nvarchar(450)");
                    b.HasKey("ID");
                    b.HasIndex("ProductID");
                    b.HasIndex("UserID");
                    b.ToTable("Img");
                });
            modelBuilder.Entity("WebUser.Domain.entities.Order", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");
                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"), 1L, 1);
                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");
                    b.Property<string>("DeliveryAddress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");
                    b.Property<int>("DeliveryMethod")
                        .HasColumnType("int");
                    b.Property<double>("Payment")
                        .HasColumnType("float");
                    b.Property<int>("PaymentMethod")
                        .HasColumnType("int");
                    b.Property<int>("PointsUsed")
                        .HasColumnType("int");
                    b.Property<bool>("Status")
                        .HasColumnType("bit");
                    b.Property<string>("UserID")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");
                    b.HasKey("ID");
                    b.HasIndex("UserID");
                    b.ToTable("Orders");
                });
            modelBuilder.Entity("WebUser.Domain.entities.OrderProduct", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");
                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"), 1L, 1);
                    b.Property<int>("Amount")
                        .HasColumnType("int");
                    b.Property<double>("FinalPrice")
                        .HasColumnType("float");
                    b.Property<int>("OrderID")
                        .HasColumnType("int");
                    b.Property<int>("ProductID")
                        .HasColumnType("int");
                    b.HasKey("ID");
                    b.HasIndex("OrderID");
                    b.HasIndex("ProductID");
                    b.ToTable("OrderProducts");
                });
            modelBuilder.Entity("WebUser.Domain.entities.Point", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");
                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"), 1L, 1);
                    b.Property<int>("BalanceLeft")
                        .HasColumnType("int");
                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");
                    b.Property<DateTime>("ExpireDate")
                        .HasColumnType("datetime2");
                    b.Property<bool>("IsExpirable")
                        .HasColumnType("bit");
                    b.Property<bool>("IsUsed")
                        .HasColumnType("bit");
                    b.Property<int?>("OrderID")
                        .HasColumnType("int");
                    b.Property<string>("UserID")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");
                    b.Property<int>("Value")
                        .HasColumnType("int");
                    b.HasKey("ID");
                    b.HasIndex("OrderID");
                    b.HasIndex("UserID");
                    b.ToTable("Points");
                });
            modelBuilder.Entity("WebUser.Domain.entities.Product", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");
                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"), 1L, 1);
                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");
                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");
                    b.Property<double>("Price")
                        .HasColumnType("float");
                    b.Property<int>("ReservedStock")
                        .HasColumnType("int");
                    b.Property<int>("Stock")
                        .HasColumnType("int");
                    b.HasKey("ID");
                    b.ToTable("Products");
                });
            modelBuilder.Entity("WebUser.Domain.entities.ProductAttributeValue", b =>
                {
                    b.Property<int>("AttributeValueID")
                        .HasColumnType("int");
                    b.Property<int>("ProductID")
                        .HasColumnType("int");
                    b.Property<int>("attID")
                        .HasColumnType("int");
                    b.HasKey("AttributeValueID", "ProductID");
                    b.HasIndex("ProductID");
                    b.ToTable("ProductAttributeValues");
                });
            modelBuilder.Entity("WebUser.Domain.entities.Promotion", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");
                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"), 1L, 1);
                    b.Property<DateTime>("ActiveFrom")
                        .HasColumnType("datetime2");
                    b.Property<DateTime>("ActiveTo")
                        .HasColumnType("datetime2");
                    b.Property<int>("BuyQuantity")
                        .HasColumnType("int");
                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");
                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");
                    b.Property<int>("DiscountPercent")
                        .HasColumnType("int");
                    b.Property<double>("DiscountVal")
                        .HasColumnType("float");
                    b.Property<int>("GetQuantity")
                        .HasColumnType("int");
                    b.Property<bool>("IsFirstOrder")
                        .HasColumnType("bit");
                    b.Property<double>("MinPay")
                        .HasColumnType("float");
                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");
                    b.Property<int>("PointsExpireDays")
                        .HasColumnType("int");
                    b.Property<int>("PointsPercent")
                        .HasColumnType("int");
                    b.Property<int>("PointsValue")
                        .HasColumnType("int");
                    b.HasKey("ID");
                    b.ToTable("Promotions");
                });
            modelBuilder.Entity("WebUser.Domain.entities.PromotionAttrValue", b =>
                {
                    b.Property<int>("PromotionID")
                        .HasColumnType("int");
                    b.Property<int>("AttributeValueID")
                        .HasColumnType("int");
                    b.HasKey("PromotionID", "AttributeValueID");
                    b.HasIndex("AttributeValueID");
                    b.ToTable("PromotionAttributeValues");
                });
            modelBuilder.Entity("WebUser.Domain.entities.PromotionCategory", b =>
                {
                    b.Property<int>("PromotionID")
                        .HasColumnType("int");
                    b.Property<int>("CategoryID")
                        .HasColumnType("int");
                    b.HasKey("PromotionID", "CategoryID");
                    b.HasIndex("CategoryID");
                    b.ToTable("PromotionCategories");
                });
            modelBuilder.Entity("WebUser.Domain.entities.PromotionProduct", b =>
                {
                    b.Property<int>("PromotionID")
                        .HasColumnType("int");
                    b.Property<int>("ProductID")
                        .HasColumnType("int");
                    b.HasKey("PromotionID", "ProductID");
                    b.HasIndex("ProductID");
                    b.ToTable("PromotionProducts");
                });
            modelBuilder.Entity("WebUser.Domain.entities.PromotionPromProduct", b =>
                {
                    b.Property<int>("PromotionID")
                        .HasColumnType("int");
                    b.Property<int>("ProductID")
                        .HasColumnType("int");
                    b.HasKey("PromotionID", "ProductID");
                    b.HasIndex("ProductID");
                    b.ToTable("PromotionPromProducts");
                });
            modelBuilder.Entity("WebUser.Domain.entities.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");
                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");
                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");
                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");
                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");
                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");
                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("nvarchar(60)");
                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("nvarchar(60)");
                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");
                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");
                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");
                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");
                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");
                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");
                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");
                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");
                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");
                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");
                    b.HasKey("Id");
                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");
                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");
                    b.ToTable("AspNetUsers", (string)null);
                });
            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("WebUser.Domain.entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("WebUser.Domain.entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                    b.HasOne("WebUser.Domain.entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("WebUser.Domain.entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
            modelBuilder.Entity("WebUser.Domain.entities.AttributeName", b =>
                {
                    b.HasOne("WebUser.Domain.entities.Category", "Category")
                        .WithMany("Attributes")
                        .HasForeignKey("CategoryID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                    b.Navigation("Category");
                });
            modelBuilder.Entity("WebUser.Domain.entities.AttributeValue", b =>
                {
                    b.HasOne("WebUser.Domain.entities.AttributeName", "AttributeName")
                        .WithMany("AttributeValues")
                        .HasForeignKey("AttributeNameID");
                    b.Navigation("AttributeName");
                });
            modelBuilder.Entity("WebUser.Domain.entities.Cart", b =>
                {
                    b.HasOne("WebUser.Domain.entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                    b.Navigation("User");
                });
            modelBuilder.Entity("WebUser.Domain.entities.CartItem", b =>
                {
                    b.HasOne("WebUser.Domain.entities.Cart", "Cart")
                        .WithMany("Items")
                        .HasForeignKey("CartID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                    b.HasOne("WebUser.Domain.entities.Product", "Product")
                        .WithMany("CartItems")
                        .HasForeignKey("ProductID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                    b.Navigation("Cart");
                    b.Navigation("Product");
                });
            modelBuilder.Entity("WebUser.Domain.entities.Category", b =>
                {
                    b.HasOne("WebUser.Domain.entities.Category", "ParentCategory")
                        .WithMany("Subcategories")
                        .HasForeignKey("ParentCategoryID");
                    b.Navigation("ParentCategory");
                });
            modelBuilder.Entity("WebUser.Domain.entities.Coupon", b =>
                {
                    b.HasOne("WebUser.Domain.entities.Order", "Order")
                        .WithMany("ActivatedCoupons")
                        .HasForeignKey("OrderID");
                    b.HasOne("WebUser.Domain.entities.OrderProduct", null)
                        .WithMany("ActivatedCoupons")
                        .HasForeignKey("OrderProductID");
                    b.HasOne("WebUser.Domain.entities.Product", "Product")
                        .WithMany("Coupons")
                        .HasForeignKey("ProductID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                    b.Navigation("Order");
                    b.Navigation("Product");
                });
            modelBuilder.Entity("WebUser.Domain.entities.Discount", b =>
                {
                    b.HasOne("WebUser.Domain.entities.Product", "Product")
                        .WithMany("Discounts")
                        .HasForeignKey("ProductID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                    b.Navigation("Product");
                });
            modelBuilder.Entity("WebUser.Domain.entities.Image", b =>
                {
                    b.HasOne("WebUser.Domain.entities.Product", "Product")
                        .WithMany("Images")
                        .HasForeignKey("ProductID");
                    b.HasOne("WebUser.Domain.entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserID");
                    b.Navigation("Product");
                    b.Navigation("User");
                });
            modelBuilder.Entity("WebUser.Domain.entities.Order", b =>
                {
                    b.HasOne("WebUser.Domain.entities.User", "User")
                        .WithMany("Orders")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                    b.Navigation("User");
                });
            modelBuilder.Entity("WebUser.Domain.entities.OrderProduct", b =>
                {
                    b.HasOne("WebUser.Domain.entities.Order", "Order")
                        .WithMany("OrderProduct")
                        .HasForeignKey("OrderID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                    b.HasOne("WebUser.Domain.entities.Product", "Product")
                        .WithMany("OrderProduct")
                        .HasForeignKey("ProductID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                    b.Navigation("Order");
                    b.Navigation("Product");
                });
            modelBuilder.Entity("WebUser.Domain.entities.Point", b =>
                {
                    b.HasOne("WebUser.Domain.entities.Order", "Order")
                        .WithMany("Points")
                        .HasForeignKey("OrderID");
                    b.HasOne("WebUser.Domain.entities.User", "User")
                        .WithMany("Points")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                    b.Navigation("Order");
                    b.Navigation("User");
                });
            modelBuilder.Entity("WebUser.Domain.entities.ProductAttributeValue", b =>
                {
                    b.HasOne("WebUser.Domain.entities.AttributeValue", "AttributeValue")
                        .WithMany("Products")
                        .HasForeignKey("AttributeValueID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                    b.HasOne("WebUser.Domain.entities.Product", "Product")
                        .WithMany("AttributeValues")
                        .HasForeignKey("ProductID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                    b.Navigation("AttributeValue");
                    b.Navigation("Product");
                });
            modelBuilder.Entity("WebUser.Domain.entities.PromotionAttrValue", b =>
                {
                    b.HasOne("WebUser.Domain.entities.AttributeValue", "AttributeValue")
                        .WithMany("Promotions")
                        .HasForeignKey("AttributeValueID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                    b.HasOne("WebUser.Domain.entities.Promotion", "Promotion")
                        .WithMany("AttributeValues")
                        .HasForeignKey("PromotionID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                    b.Navigation("AttributeValue");
                    b.Navigation("Promotion");
                });
            modelBuilder.Entity("WebUser.Domain.entities.PromotionCategory", b =>
                {
                    b.HasOne("WebUser.Domain.entities.Category", "Category")
                        .WithMany("Promotions")
                        .HasForeignKey("CategoryID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                    b.HasOne("WebUser.Domain.entities.Promotion", "Promotion")
                        .WithMany("Categories")
                        .HasForeignKey("PromotionID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                    b.Navigation("Category");
                    b.Navigation("Promotion");
                });
            modelBuilder.Entity("WebUser.Domain.entities.PromotionProduct", b =>
                {
                    b.HasOne("WebUser.Domain.entities.Product", "Product")
                        .WithMany("Promotions")
                        .HasForeignKey("ProductID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                    b.HasOne("WebUser.Domain.entities.Promotion", "Promotion")
                        .WithMany("Products")
                        .HasForeignKey("PromotionID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                    b.Navigation("Product");
                    b.Navigation("Promotion");
                });
            modelBuilder.Entity("WebUser.Domain.entities.PromotionPromProduct", b =>
                {
                    b.HasOne("WebUser.Domain.entities.Product", "Product")
                        .WithMany("PromoPromotions")
                        .HasForeignKey("ProductID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                    b.HasOne("WebUser.Domain.entities.Promotion", "Promotion")
                        .WithMany("PromoProducts")
                        .HasForeignKey("PromotionID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                    b.Navigation("Product");
                    b.Navigation("Promotion");
                });
            modelBuilder.Entity("WebUser.Domain.entities.AttributeName", b =>
                {
                    b.Navigation("AttributeValues");
                });
            modelBuilder.Entity("WebUser.Domain.entities.AttributeValue", b =>
                {
                    b.Navigation("Products");
                    b.Navigation("Promotions");
                });
            modelBuilder.Entity("WebUser.Domain.entities.Cart", b =>
                {
                    b.Navigation("Items");
                });
            modelBuilder.Entity("WebUser.Domain.entities.Category", b =>
                {
                    b.Navigation("Attributes");
                    b.Navigation("Promotions");
                    b.Navigation("Subcategories");
                });
            modelBuilder.Entity("WebUser.Domain.entities.Order", b =>
                {
                    b.Navigation("ActivatedCoupons");
                    b.Navigation("OrderProduct");
                    b.Navigation("Points");
                });
            modelBuilder.Entity("WebUser.Domain.entities.OrderProduct", b =>
                {
                    b.Navigation("ActivatedCoupons");
                });
            modelBuilder.Entity("WebUser.Domain.entities.Product", b =>
                {
                    b.Navigation("AttributeValues");
                    b.Navigation("CartItems");
                    b.Navigation("Coupons");
                    b.Navigation("Discounts");
                    b.Navigation("Images");
                    b.Navigation("OrderProduct");
                    b.Navigation("PromoPromotions");
                    b.Navigation("Promotions");
                });
            modelBuilder.Entity("WebUser.Domain.entities.Promotion", b =>
                {
                    b.Navigation("AttributeValues");
                    b.Navigation("Categories");
                    b.Navigation("Products");
                    b.Navigation("PromoProducts");
                });
            modelBuilder.Entity("WebUser.Domain.entities.User", b =>
                {
                    b.Navigation("Orders");
                    b.Navigation("Points");
                });
#pragma warning restore 612, 618
        }
    }
}
